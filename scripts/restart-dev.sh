#!/bin/bash

# Script para reiniciar microservicios espec√≠ficos o todos
# Autor: Generado para desarrollo local

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Detectar comando docker-compose
if command -v docker-compose >/dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker-compose"
elif docker compose version >/dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker compose"
else
    echo -e "${RED}‚ùå docker-compose no est√° disponible${NC}"
    exit 1
fi

# Verificar si estamos en el directorio correcto
if [[ ! -f "docker-compose.yml" ]]; then
    echo -e "${RED}‚ùå No se encontr√≥ docker-compose.yml. Ejecuta este script desde la ra√≠z del proyecto.${NC}"
    exit 1
fi

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}üîÑ Uso del script de reinicio:${NC}"
    echo ""
    echo -e "${YELLOW}Opciones:${NC}"
    echo -e "  ${GREEN}./scripts/restart-dev.sh${NC}                    - Reiniciar todos los servicios"
    echo -e "  ${GREEN}./scripts/restart-dev.sh [servicio]${NC}         - Reiniciar un servicio espec√≠fico"
    echo -e "  ${GREEN}./scripts/restart-dev.sh --build${NC}            - Reiniciar y reconstruir im√°genes"
    echo ""
    echo -e "${YELLOW}Servicios disponibles:${NC}"
    echo -e "  ‚Ä¢ auth-api"
    echo -e "  ‚Ä¢ users-api"
    echo -e "  ‚Ä¢ todos-api"
    echo -e "  ‚Ä¢ frontend"
    echo -e "  ‚Ä¢ log-message-processor"
    echo -e "  ‚Ä¢ users-db"
    echo -e "  ‚Ä¢ redis"
    echo -e "  ‚Ä¢ rabbitmq"
    echo ""
    echo -e "${YELLOW}Ejemplos:${NC}"
    echo -e "  ${BLUE}./scripts/restart-dev.sh auth-api${NC}           - Reiniciar solo auth-api"
    echo -e "  ${BLUE}./scripts/restart-dev.sh frontend --build${NC}   - Reconstruir y reiniciar frontend"
}

# Parsear argumentos
SERVICE=""
BUILD=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        --build)
            BUILD="--build"
            shift
            ;;
        *)
            if [[ -z "$SERVICE" ]]; then
                SERVICE="$1"
            fi
            shift
            ;;
    esac
done

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}üîÑ Reiniciando Microservicios${NC}"
echo -e "${BLUE}======================================${NC}"

if [[ -n "$SERVICE" ]]; then
    echo -e "${YELLOW}üîÑ Reiniciando servicio: ${GREEN}$SERVICE${NC}"

    if [[ -n "$BUILD" ]]; then
        echo -e "${YELLOW}üî® Reconstruyendo imagen...${NC}"
        $DOCKER_COMPOSE_CMD build $SERVICE
    fi

    echo -e "${YELLOW}‚èπÔ∏è  Deteniendo $SERVICE...${NC}"
    $DOCKER_COMPOSE_CMD stop $SERVICE

    echo -e "${YELLOW}‚ñ∂Ô∏è  Iniciando $SERVICE...${NC}"
    $DOCKER_COMPOSE_CMD up -d $SERVICE

    echo -e "${GREEN}‚úÖ $SERVICE reiniciado correctamente${NC}"

    # Mostrar logs del servicio reiniciado
    echo -e "${BLUE}üìã Logs recientes de $SERVICE:${NC}"
    sleep 2
    $DOCKER_COMPOSE_CMD logs --tail=10 $SERVICE

else
    echo -e "${YELLOW}üîÑ Reiniciando todos los servicios...${NC}"

    if [[ -n "$BUILD" ]]; then
        echo -e "${YELLOW}üî® Reconstruyendo todas las im√°genes...${NC}"
        $DOCKER_COMPOSE_CMD build
    fi

    echo -e "${YELLOW}‚èπÔ∏è  Deteniendo servicios...${NC}"
    $DOCKER_COMPOSE_CMD down

    echo -e "${YELLOW}‚ñ∂Ô∏è  Iniciando servicios...${NC}"
    $DOCKER_COMPOSE_CMD up -d

    echo -e "${GREEN}‚úÖ Todos los servicios reiniciados correctamente${NC}"

    # Esperar y mostrar estado
    echo -e "${YELLOW}‚è≥ Esperando que los servicios se inicien...${NC}"
    sleep 10

    echo -e "${BLUE}üìä Estado de servicios:${NC}"
    $DOCKER_COMPOSE_CMD ps
fi

echo ""
echo -e "${YELLOW}üí° Comandos √∫tiles:${NC}"
echo -e "  Ver logs:              ${BLUE}./scripts/logs.sh${NC}"
echo -e "  Ver logs espec√≠ficos:  ${BLUE}./scripts/logs.sh [servicio]${NC}"
echo -e "  Estado de servicios:   ${BLUE}docker-compose ps${NC}"