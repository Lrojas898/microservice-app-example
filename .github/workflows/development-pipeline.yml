name: Development Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # Job para validar y formatear cÃ³digo
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

  # Job para construir y probar microservicios
  build-services:
    name: Build Services
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        service: [auth-api, users-api, todos-api, frontend, log-message-processor]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # ðŸ‘‰ Verificar si es proyecto Java (tiene pom.xml)
    - name: Check if Java project (pom.xml exists)
      id: check_java
      run: |
        if [ -f "./${{ matrix.service }}/pom.xml" ]; then
          echo "is_java=true" >> $GITHUB_OUTPUT
          echo "âœ… ${{ matrix.service }} is a Java project"
        else
          echo "is_java=false" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ ${{ matrix.service }} is not a Java project"
        fi

    # ðŸ‘‰ Configurar JDK 8 solo para proyectos Java
    - name: Set up JDK 8
      if: steps.check_java.outputs.is_java == 'true'
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'

    # ðŸ‘‰ Compilar con Maven solo para proyectos Java
    - name: Build with Maven
      if: steps.check_java.outputs.is_java == 'true'
      run: mvn clean package -DskipTests
      working-directory: ./${{ matrix.service }}

    # ðŸ‘‰ Construir imagen Docker
    - name: Build ${{ matrix.service }} Docker image
      run: |
        docker build -t ${{ matrix.service }}:latest ./${{ matrix.service }}
      working-directory: ./
      
    # ðŸ‘‰ Test Docker image (opcional, mejorable)
    - name: Test Docker image
      run: |
        # Para Java, no tiene sentido --version, asÃ­ que solo verificamos que la imagen existe
        docker run --rm ${{ matrix.service }}:latest echo "Service built successfully" || echo "Container test failed"
