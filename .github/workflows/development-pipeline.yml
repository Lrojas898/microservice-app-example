name: Development Pipeline

on:
  push:
    branches: [ develop, dev, feature/* ]
  pull_request:
    branches: [ develop, dev, master ]  # 👈 Añadimos master aquí para detectar PRs hacia master

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  # Job para validar y formatear código
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: Terraform Init (Validation Only)
      run: |
        echo "🔑 Initializing Terraform for validation (no deployment)..."
        terraform init -backend=false
      working-directory: ./terraform
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

  # Job para validar que PR hacia master tenga solo 1 commit (nuevo)
  validate-pr-single-commit:
    name: Validate PR has Single Commit
    runs-on: ubuntu-latest
    # Solo se ejecuta si es un PR hacia master
    if: github.event_name == 'pull_request' && github.base_ref == 'master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para ver todo el historial

    - name: Get PR commit count
      id: commit_count
      run: |
        # Cuenta los commits en el PR (desde la base hasta la cabeza)
        COUNT=$(git rev-list --count ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        echo "commit_count=$COUNT" >> $GITHUB_OUTPUT
        echo "🔍 PR has $COUNT commits"

    - name: Fail if more than 1 commit
      if: steps.commit_count.outputs.commit_count != '1'
      run: |
        echo "❌ ERROR: Pull Request towards 'master' must have exactly 1 commit."
        echo "💡 Tip: Use 'git rebase -i' to squash your commits into one."
        exit 1

    - name: Success message
      if: steps.commit_count.outputs.commit_count == '1'
      run: |
        echo "✅ PR has exactly 1 commit. Ready for review!"

  # Job para construir imágenes Docker para desarrollo
  build-services:
    name: Build Services
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Solo necesita code-quality, no validate-pr-single-commit (puede correr en paralelo)
    needs: code-quality
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate unique image tag
      id: tag
      run: |
        BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')
        TAG=dev-${BRANCH}-${GITHUB_SHA::8}
        echo "image_tag=$TAG" >> $GITHUB_OUTPUT
        echo "📦 Generated tag: $TAG"

    # Set up JDK 8 for Java projects
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('users-api/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Build users-api (Java/Spring Boot)
    - name: Build users-api
      run: |
        cd ./users-api
        mvn clean package -DskipTests
        cd ..
        docker build -t users-api:${{ steps.tag.outputs.image_tag }} ./users-api

    # Build auth-api (Go)
    - name: Build auth-api
      run: |
        docker build -t auth-api:${{ steps.tag.outputs.image_tag }} ./auth-api

    # Build todos-api (Node.js)
    - name: Build todos-api
      run: |
        docker build -t todos-api:${{ steps.tag.outputs.image_tag }} ./todos-api

    # Build frontend (Vue.js) - using pre-built folder
    - name: Build frontend
      run: |
        echo "⚠️ Using pre-built 'build' folder from repo"
        if [ ! -d "frontend/build" ]; then
          echo "❌ Pre-built folder 'build' not found in ./frontend/"
          ls -la frontend/
          exit 1
        fi
        docker build -t frontend:${{ steps.tag.outputs.image_tag }} ./frontend

    # Build log-message-processor (Python)
    - name: Build log-message-processor
      run: |
        docker build -t log-message-processor:${{ steps.tag.outputs.image_tag }} ./log-message-processor

    - name: Test Docker images (basic smoke test)
      run: |
        TAG=${{ steps.tag.outputs.image_tag }}
        echo "🧪 Testing image: users-api:$TAG"
        docker run --rm --entrypoint=echo users-api:$TAG "✅ Built successfully" || exit 1

        echo "🧪 Testing image: auth-api:$TAG"
        docker run --rm --entrypoint=echo auth-api:$TAG "✅ Built successfully" || exit 1

        echo "🧪 Testing image: todos-api:$TAG"
        docker run --rm --entrypoint=echo todos-api:$TAG "✅ Built successfully" || exit 1

        echo "🧪 Testing image: frontend:$TAG"
        docker run --rm --entrypoint=echo frontend:$TAG "✅ Built successfully" || exit 1

        echo "🧪 Testing image: log-message-processor:$TAG"
        docker run --rm --entrypoint=echo log-message-processor:$TAG "✅ Built successfully" || exit 1

  # Job para notificaciones
  notify-build:
    name: Notify Build
    runs-on: ubuntu-latest
    # Si validate-pr-single-commit falla, este job no se ejecutará (porque build-services necesita code-quality, pero no depende del nuevo job)
    needs: [code-quality, build-services]
    if: always()
    
    steps:
    - name: Notify Success
      if: always()
      run: |
        TAG=${{ needs.build-services.outputs.image_tag }}
        echo "✅ Development build completed!"
        echo "📦 Images built locally with tag: $TAG"
        echo "🔗 users-api:$TAG"
        echo "🔗 auth-api:$TAG"
        echo "🔗 todos-api:$TAG"
        echo "🔗 frontend:$TAG"
        echo "🔗 log-message-processor:$TAG"
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "📝 This was triggered by PR #${{ github.event.pull_request.number }}"
        fi