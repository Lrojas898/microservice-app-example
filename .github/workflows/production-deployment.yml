name: Production Deployment Pipeline

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # Job para validar c√≥digo antes del despliegue
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

  # Job para construir im√°genes Docker para producci√≥n
  build-production-images:
    name: Build Production Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-deployment-checks
    
    strategy:
      matrix:
        service: [auth-api, users-api, todos-api, frontend, log-message-processor]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build ${{ matrix.service }} Docker image
      run: |
        docker build -t ${{ matrix.service }}:latest ./${{ matrix.service }}
      working-directory: ./

  # Job para desplegar infraestructura de producci√≥n
  deploy-infrastructure:
    name: Deploy Production Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pre-deployment-checks, build-production-images]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Plan
      run: terraform plan -var="location=centralus" -var="resource_group_location=centralus" -var="db_location=centralus" -out=tfplan
      working-directory: ./terraform
      
    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve tfplan
      working-directory: ./terraform
      
    - name: Cleanup
      run: rm -f tfplan
      working-directory: ./terraform

  # Job para notificaciones
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-infrastructure.result == 'success'
      run: |
        echo "‚úÖ Production deployment completed successfully!"
        echo "üöÄ Services are now running in production"
        
    - name: Notify Failure
      if: needs.deploy-infrastructure.result == 'failure'
      run: |
        echo "‚ùå Production deployment failed!"
        echo "üîç Check the logs for more details"
        exit 1
