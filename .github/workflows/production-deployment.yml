name: Production Deployment Pipeline

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}  # Aseg√∫rate de definir este secreto en GitHub

jobs:
  # Job para validar c√≥digo antes del despliegue
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

  # Job para construir im√°genes Docker para producci√≥n
  build-production-images:
    name: Build Production Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-deployment-checks
    outputs:
      users_api_image: ${{ steps.export.outputs.users_api_image }}
      auth_api_image: ${{ steps.export.outputs.auth_api_image }}
      todos_api_image: ${{ steps.export.outputs.todos_api_image }}
      frontend_image: ${{ steps.export.outputs.frontend_image }}
      log_processor_image: ${{ steps.export.outputs.log_processor_image }}

    strategy:
      matrix:
        service: [auth-api, users-api, todos-api, frontend, log-message-processor]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}  # Crea este secreto en GitHub

    # Generar tag √∫nico basado en commit SHA
    - name: Generate unique image tag
      id: tag
      run: |
        TAG=gh-${GITHUB_SHA::8}
        echo "image_tag=$TAG" >> $GITHUB_OUTPUT
        echo "Using tag: $TAG"

    # Construir frontend (React/Vue/etc) - genera carpeta 'build/'
    - name: Build frontend app
      if: matrix.service == 'frontend'
      run: |
        echo "üì¶ Building frontend..."
        npm ci
        npm run build
      working-directory: ./frontend
      env:
        CI: true

    # Verificar si es proyecto Java (tiene pom.xml)
    - name: Check if Java project (pom.xml exists)
      id: check_java
      run: |
        if [ -f "./${{ matrix.service }}/pom.xml" ]; then
          echo "is_java=true" >> $GITHUB_OUTPUT
          echo "‚úÖ ${{ matrix.service }} is a Java project"
        else
          echo "is_java=false" >> $GITHUB_OUTPUT
          echo "üì¶ ${{ matrix.service }} is not a Java project"
        fi

    # Configurar JDK 8 solo para proyectos Java
    - name: Set up JDK 8
      if: steps.check_java.outputs.is_java == 'true'
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'

    # Compilar con Maven solo para proyectos Java
    - name: Build with Maven
      if: steps.check_java.outputs.is_java == 'true'
      run: mvn clean package -DskipTests
      working-directory: ./${{ matrix.service }}

    # Cache de dependencias Maven (mejora velocidad)
    - name: Cache Maven dependencies
      if: steps.check_java.outputs.is_java == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles(format('./{0}/pom.xml', matrix.service)) }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Construir, taggear y subir imagen Docker
    - name: Build, tag, and push Docker image
      id: build_push
      run: |
        IMAGE_NAME="${{ matrix.service }}"
        IMAGE_TAG="${{ steps.tag.outputs.image_tag }}"
        FULL_IMAGE="${{ env.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${IMAGE_TAG}"
        
        echo "üèóÔ∏è Building image: $FULL_IMAGE"
        docker build -t $FULL_IMAGE ./${{ matrix.service }}
        
        echo "‚¨ÜÔ∏è Pushing image to Docker Hub..."
        docker push $FULL_IMAGE
        
        # Guardar para output del job
        echo "image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
        echo "${IMAGE_NAME}_image=${FULL_IMAGE}" >> $GITHUB_ENV

    # Exportar outputs para el job de Terraform
    - name: Export image tags for Terraform
      id: export
      if: always()
      run: |
        echo "users_api_image=${{ env.users_api_image || 'not-built' }}" >> $GITHUB_OUTPUT
        echo "auth_api_image=${{ env.auth_api_image || 'not-built' }}" >> $GITHUB_OUTPUT
        echo "todos_api_image=${{ env.todos_api_image || 'not-built' }}" >> $GITHUB_OUTPUT
        echo "frontend_image=${{ env.frontend_image || 'not-built' }}" >> $GITHUB_OUTPUT
        echo "log_processor_image=${{ env.log_processor_image || 'not-built' }}" >> $GITHUB_OUTPUT

  # Job para desplegar infraestructura de producci√≥n
  deploy-infrastructure:
    name: Deploy Production Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pre-deployment-checks, build-production-images]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Plan
      run: |
        terraform plan \
          -var="location=centralus" \
          -var="resource_group_location=centralus" \
          -var="db_location=centralus" \
          -var="users_api_image=${{ needs.build-production-images.outputs.users_api_image }}" \
          -var="auth_api_image=${{ needs.build-production-images.outputs.auth_api_image }}" \
          -var="todos_api_image=${{ needs.build-production-images.outputs.todos_api_image }}" \
          -var="frontend_image=${{ needs.build-production-images.outputs.frontend_image }}" \
          -var="log_processor_image=${{ needs.build-production-images.outputs.log_processor_image }}" \
          -out=tfplan
      working-directory: ./terraform
      
    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve tfplan
      working-directory: ./terraform
      
    - name: Cleanup
      run: rm -f tfplan
      working-directory: ./terraform

  # Job para notificaciones
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-infrastructure.result == 'success'
      run: |
        echo "‚úÖ Production deployment completed successfully!"
        echo "üöÄ Services are now running in production"
        echo "üîó Users API: ${{ needs.build-production-images.outputs.users_api_image }}"
        echo "üîó Todos API: ${{ needs.build-production-images.outputs.todos_api_image }}"
        echo "üîó Frontend: ${{ needs.build-production-images.outputs.frontend_image }}"
        
    - name: Notify Failure
      if: needs.deploy-infrastructure.result == 'failure'
      run: |
        echo "‚ùå Production deployment failed!"
        echo "üîç Check the logs for more details"
        exit 1
