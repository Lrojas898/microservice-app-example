name: Cleanup Pipeline

on:
  schedule:
    # Ejecutar todos los d√≠as a las 2 AM UTC para limpiar recursos de desarrollo
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to cleanup'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # Job para limpiar recursos de desarrollo antiguos
  cleanup-development-resources:
    name: Cleanup Development Resources
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
          
    - name: List old resource groups
      run: |
        echo "Listing resource groups older than 7 days..."
        az group list --query "[?tags.Environment=='development' && tags.CreatedDate<='$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%SZ)'].name" -o table
        
    - name: Delete old development resources
      run: |
        # Obtener resource groups de desarrollo antiguos
        OLD_RGS=$(az group list --query "[?tags.Environment=='development' && tags.CreatedDate<='$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%SZ)'].name" -o tsv)
        
        if [ -n "$OLD_RGS" ]; then
          echo "Deleting old development resource groups..."
          for rg in $OLD_RGS; do
            echo "Deleting resource group: $rg"
            az group delete --name "$rg" --yes --no-wait
          done
        else
          echo "No old development resources found to clean up"
        fi

  # Job para limpiar im√°genes Docker antiguas
  cleanup-docker-images:
    name: Cleanup Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
          
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Clean up old images
      run: |
        echo "Cleaning up old Docker images from ACR..."
        # Limpiar im√°genes m√°s antiguas de 30 d√≠as
        az acr repository list --name ${{ secrets.ACR_NAME }} --output table
        
        # Nota: En un entorno real, aqu√≠ ir√≠an comandos para eliminar im√°genes antiguas
        # az acr repository delete --name ${{ secrets.ACR_NAME }} --image <image:tag> --yes

  # Job para generar reporte de limpieza
  generate-cleanup-report:
    name: Generate Cleanup Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [cleanup-development-resources, cleanup-docker-images]
    if: always()
    
    steps:
    - name: Generate report
      run: |
        echo "## üßπ Cleanup Report - $(date)" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "| Job | Status |" >> cleanup-report.md
        echo "|-----|--------|" >> cleanup-report.md
        echo "| Development Resources | ${{ needs.cleanup-development-resources.result }} |" >> cleanup-report.md
        echo "| Docker Images | ${{ needs.cleanup-docker-images.result }} |" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "Cleanup completed at: $(date)" >> cleanup-report.md
        
    - name: Upload report
      uses: actions/upload-artifact@v3
      with:
        name: cleanup-report
        path: cleanup-report.md
