name: Feature Branch Validation

on:
  push:
    branches: [ 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ master ]

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # Job para validación rápida de código (Trunk-based)
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

  # Job para construir servicios (solo los modificados)
  build-changed-services:
    name: Build Changed Services
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: |
          auth-api/**
          users-api/**
          todos-api/**
          frontend/**
          log-message-processor/**
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build changed services
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        # Construir solo los servicios que han cambiado
        for service in auth-api users-api todos-api frontend log-message-processor; do
          if [[ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]] && [[ -d "$service" ]]; then
            echo "Building $service..."
            docker build -t $service:test ./$service
          fi
        done

  # Job para validar infraestructura (sin desplegar)
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Plan (Dry Run)
      run: terraform plan -var="location=centralus" -var="resource_group_location=centralus" -var="db_location=centralus" -detailed-exitcode
      working-directory: ./terraform
      continue-on-error: true

  # Job para comentar en PR
  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [quick-validation, build-changed-services, validate-infrastructure]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## 🚀 Feature Branch Validation Results')
          );
          
          const body = `## 🚀 Feature Branch Validation Results
          
          | Check | Status |
          |-------|--------|
          | Code Format | ${{ needs.quick-validation.result == 'success' && '✅' || '❌' }} |
          | Build Services | ${{ needs.build-changed-services.result == 'success' && '✅' || '❌' }} |
          | Validate Infrastructure | ${{ needs.validate-infrastructure.result == 'success' && '✅' || '❌' }} |
          
          **Overall Status:** ${{ needs.validate-infrastructure.result == 'success' && '✅ Ready for merge' || '❌ Issues found' }}
          
          ${{ needs.validate-infrastructure.result != 'success' && 'Please fix the issues above before merging.' || 'All checks passed! This feature is ready for review.' }}`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
